package com.cloned.hackdroid;

 
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.List;
import java.util.Properties;
 
import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
 
import com.jcraft.jsch.Channel;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
 
public class SshConnect extends Activity {
    /** Called when the activity is first created. */
    EditText command;
    TextView result;
    Button connectBtn;
    Session session;
    ByteArrayOutputStream baos;
    ByteArrayInputStream bais;
    Channel channel;
 
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.terminal);
        bais = new ByteArrayInputStream(new byte[1000]);
        command = (EditText) findViewById(R.id.editText1);
        result  = (TextView) findViewById(R.id.terminal);
        connectBtn = (Button) findViewById(R.id.button1);
        
        connectBtn.setOnTouchListener(new OnTouchListener() {

            @Override
            public boolean onTouch(View v, MotionEvent event) {
             // TODO Auto-generated method stub
             return false;
            }
           }))
    }
 
    public void onSSH(View v){
        String username = "cloned";
        String password = "0201windose";
        String host     = "192.168.87.101"; // sample ip address
        if(command.getText().toString() != ""){
            JSch jsch = new JSch();
            try {
                session = jsch.getSession(username, host, 22);
                session.setPassword(password);
 
                Properties properties = new Properties();
                properties.put("StrictHostKeyChecking", "no");
                session.setConfig(properties);
                session.connect(30000);
 
                channel = session.openChannel("shell");
                channel.setInputStream(bais);
                channel.setOutputStream(baos);
//                setUpHostKey(session);
                channel.connect();
 
            } catch (JSchException e) {
                // TODO Auto-generated catch block
                Toast.makeText(this, e.getMessage(), Toast.LENGTH_LONG).show();
            }
        }
        else{
            Toast.makeText(this, "Command cannot be empty !", Toast.LENGTH_LONG).show();
        }
    }
 
    public void onCommand(View v){
        try {
            bais.read(command.getText().toString().getBytes());
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
 
        baos = new ByteArrayOutputStream();
        channel.setOutputStream(baos);
        result.setText(baos.toString());
 
    }

       
//cmd1 ; cmd2 ; cmd3
//       
//cmd1 && cmd2 && cmd3
//       
//cmd1
//cmd2
//cmd3
//       
//channel.setCommand("cmd1ncmd2ncmd3");
//       
//List<String> commands = new ArrayList<String>();
//    commands.add("touch test1.txt");
//    commands.add("touch test2.txt");
//    commands.add("touch test3.txt");
//    runCommands(scpInfo, commands);
 
//public static void runCommands(SCPInfo scpInfo, List<String> commands){
//    try {
//        JSch jsch = new JSch();
//        Session session = jsch.getSession(scpInfo.getUsername(), scpInfo.getIP(), scpInfo.getPort());
//        session.setPassword(scpInfo.getPassword());
//        setUpHostKey(session);
//        session.connect();
// 
//        Channel channel=session.openChannel("shell");//only shell  
//        channel.setOutputStream(System.out);
//        PrintStream shellStream = new PrintStream(channel.getOutputStream());  // printStream for convenience
//        channel.connect();
//        for(String command: commands) {
//            shellStream.println(command);
//            shellStream.flush();
//        }
// 
//        Thread.sleep(5000);
// 
//        channel.disconnect();
//        session.disconnect();
//    } catch (Exception e) {
//        System.err.println("ERROR: Connecting via shell to "+scpInfo.getIP());
//        e.printStackTrace();
//    }
//}
 
private static void setUpHostKey(Session session) {
    // Note: There are two options to connect
    // 1: Set StrictHostKeyChecking to no
    //    Create a Properties Object
    //    Set StrictHostKeyChecking to no
    //    session.setConfig(config);
    // 2: Use the KnownHosts File
    //    Manually ssh into the appropriate machines via unix
    //    Go into the .sshknown_hosts file and grab the entries for the hosts
    //    Add the entries to a known_hosts file
    //    jsch.setKnownHosts(khfile);
    java.util.Properties config = new java.util.Properties();
    config.put("StrictHostKeyChecking", "no");
    session.setConfig(config);
}
}