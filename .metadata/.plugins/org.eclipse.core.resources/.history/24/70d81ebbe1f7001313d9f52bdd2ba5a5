package com.cloned.hackdroid;


import java.io.InputStream;
import java.util.Properties;

import android.os.AsyncTask;
import android.os.StrictMode;
import android.util.Log;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;

public class Shell extends AsyncTask<String, String, Long> {

	    private static String Konsoleantwort = null;

		@Override
	    protected Long doInBackground(String... arguments) {
	        // TODO Auto-generated method stub
	        // Shell.java Code

//			String username = "cloned";
//			String password = "0201windose";
//			String host = "192.168.87.101"; // sample ip address
//			String input;
//			//
//			JSch jsch = new JSch();
//			try {
//
//
//				
//				//Creating session
//				Session session;
//				session = jsch.getSession(username, host, 22);
//				StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder()
//						.permitAll().build();
//				StrictMode.setThreadPolicy(policy);
//				session.setPassword(password);
//				
//				// Avoid asking for key confirmation
//				Properties prop = new Properties();
//				prop.put("StrictHostKeyChecking", "no");
//				session.setConfig(prop);
//				session.connect();
//				
//			
//			
			
			
			
			
	        // Extract Arguments
	        String user = "cloned";
	        String host = "0201windose";
	        int port = 22;
	        String password = arguments[2];
	        String command = arguments[3];

	        Long response = (long) 0;

	        System.out.println("SSH connecting...");

	        try
	        {
	            JSch jsch = new JSch();
	              Session session = jsch.getSession(user,host,port);
	              StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder()
					.permitAll().build();
			StrictMode.setThreadPolicy(policy);
	              session.setPassword(password);

	              // Avoid asking for key confirmation
	              Properties prop = new Properties();
	              prop.put("StrictHostKeyChecking", "no");
	              session.setConfig(prop);

	              session.connect();

	              System.out.println("SSH connected!");




	              Channel channel = session.openChannel("exec");
	              ((ChannelExec)channel).setCommand(command);
	              channel.setInputStream(null);

	              ((ChannelExec)channel).setErrStream(System.err);

	              InputStream in=channel.getInputStream();
	              channel.connect();

	              byte[] tmp=new byte[1024];
	              while(true){
	                 while(in.available()>0){
	                    int i = in.read(tmp, 0, 1024);
	                    if (i<0) break;
	                    Konsoleantwort = new String(tmp, 0, i);
	                    System.out.print(new String(tmp, 0, i));
	                 }
	                 if (channel.isClosed()) {
	                    System.out.println("exit-status: "+channel.getExitStatus());

	                    Log.v("blah", "blah blah");
	                    Log.v("Konsoleantwort:", Konsoleantwort);

	                    break;
	                 }
	                 try{Thread.sleep(1000);}catch(Exception ee){}
	              }

	              channel.disconnect();
	              session.disconnect();

	        }
	        catch (Exception e)
	        {
	          System.out.println(e.getMessage());
	        }

	        //Return Wert je nach eingegebenem command

	        if(command == "sudo /home/pi/wiringPi/rcswitch-pi/send 11010 2 1"){response = (long) 111;}  //Fender Amp
	        if(command == "sudo /home/pi/wiringPi/rcswitch-pi/send 11010 2 0"){response = (long) 110;}
	        if(command == "sudo /home/pi/wiringPi/rcswitch-pi/send 11010 2 1"){response = (long) 121;}  //Bettlicht
	        if(command == "sudo /home/pi/wiringPi/rcswitch-pi/send 11010 2 0"){response = (long) 120;}
	        if(command == "sudo /home/pi/wiringPi/rcswitch-pi/send 11010 1 1"){response = (long) 131;}  //Radio
	        if(command == "sudo /home/pi/wiringPi/rcswitch-pi/send 11010 1 0"){response = (long) 130;}

	        return response;
	    }

	    protected void onPostExecute(Long response) {
	        //result anzeigen
//	        String meldung = "Meldung undefiniert";
//
//	        if(response==111){
//	            meldung = "Bettlicht Raum 1 An!";
//	            room1toggle2.setChecked(true);
//	            writeBoolPref("room1switch1Key", true);
//	        }
//	        if(response==110){
//	            meldung = "Bettlicht Raum 1 Aus!";
//	            room1toggle2.setChecked(false);
//	            writeBoolPref("room1switch1Key", false);
//	        }
//	        if(response==121){
//	            meldung = "Bettlicht Raum 1 An!";
//	            room1toggle2.setChecked(true);
//	            writeBoolPref("room1switch2Key", true);
//	        }
//	        if(response==120){
//	            meldung = "Bettlicht Raum 1 Aus!";
//	            room1toggle2.setChecked(false);
//	            writeBoolPref("room1switch2Key", false);
//	        }
//	        if(response==131){
//	            meldung = "Radio Raum 1 An!";
//	            room1toggle3.setChecked(true);
//	            writeBoolPref("room1switch3Key", true);
//	        }
//	        if(response==130){
//	            meldung = "Radio Raum 1 Aus!";
//	            room1toggle3.setChecked(false);
//	            writeBoolPref("room1switch3Key", false);
//	        }
//
//	        labelMessage.setText(meldung);
//	        }


	    }
	}