package com.cloned.hackdroid;

//Important: Don't forget to include the call to System.loadLibrary
//as shown at the bottom of this code sample.


import android.app.Activity;
import com.cloned.*;

import android.util.Log;
import android.widget.TextView;
import android.os.Bundle;

public class SshConnect extends Activity {

private static final String TAG = "Chilkat";

// Called when the activity is first created.
@Override
public void onCreate(Bundle savedInstanceState) {
 super.onCreate(savedInstanceState);

 //  Important: It is helpful to send the contents of the
 //  ssh.LastErrorText property when requesting support.

 CkSsh ssh = new CkSsh();

 //  Any string automatically begins a fully-functional 30-day trial.
 boolean success;
 success = ssh.UnlockComponent("Anything for 30-day trial");
 if (success != true) {
     Log.i(TAG, ssh.lastErrorText());
     return;
 }

 //  Connect to an SSH server:
 String hostname;
 int port;

 //  Hostname may be an IP address or hostname:
 hostname = "192.168.1.108";
 port = (int) 22;

 success = ssh.Connect(hostname,port);
 if (success != true) {
     Log.i(TAG, ssh.lastErrorText());
     return;
 }

 //  Wait a max of 5 seconds when reading responses..
 ssh.put_IdleTimeoutMs(5000);

 //  Authenticate using login/password:
 success = ssh.AuthenticatePw("myLogin","myPassword");
 if (success != true) {
     Log.i(TAG, ssh.lastErrorText());
     return;
 }

 //  Open a session channel.  (It is possible to have multiple
 //  session channels open simultaneously.)
 int channelNum;
 channelNum = (int) ssh.OpenSessionChannel();
 if (channelNum < 0) {
     Log.i(TAG, ssh.lastErrorText());
     return;
 }

 //  The SendReqExec method starts a command on the remote
 //  server.   The syntax of the command string depends on the
 //  default shell used on the remote server to run the command.
 //  On Windows systems it is CMD.EXE.  On UNIX/Linux
 //  systems the user's default shell is typically defined in /etc/password.

 //  Here are some examples of command lines for <b>Windows SSH servers</b>:

 //  Get a directory listing:
 String cmd1;
 cmd1 = "dir";

 //  Do a nameserver lookup:
 String cmd2;
 cmd2 = "nslookup chilkatsoft.com";

 //  List a specific directory.  Given that the shell is CMD.EXE, backslashes must
 //  be used:
 String cmd3;
 cmd3 = "dir \\temp";

 //  Execute a sequence of commands.  The syntax for CMD.EXE may be found
 //  here: http://technet.microsoft.com/en-us/library/bb490880.aspx.  Notice how the commands
 //  are separated by "&&" and the entire command must be enclosed in quotes:
 String cmd4;
 cmd4 = "\"cd \\temp&&dir\"";

 //  Here are two examples of command lines for <b>Linux/UNIX SSH servers</b>:

 //  Get a directory listing:
 String cmd5;
 cmd5 = "ls -l /tmp";

 //  Run a series of commands (syntax may depend on your default shell):
 String cmd6;
 cmd6 = "cd /etc; ls -la";

 //  Request a directory listing on the remote server:
 //  If your server is Windows, change the string from "ls" to "dir"
 success = ssh.SendReqExec(channelNum,"ls");
 if (success != true) {
     Log.i(TAG, ssh.lastErrorText());
     return;
 }

 //  Call ChannelReceiveToClose to read
 //  output until the server's corresponding "channel close" is received.
 success = ssh.ChannelReceiveToClose(channelNum);
 if (success != true) {
     Log.i(TAG, ssh.lastErrorText());
     return;
 }

 //  Let's pickup the accumulated output of the command:
 String cmdOutput;
 cmdOutput = ssh.getReceivedText(channelNum,"ansi");
 if (cmdOutput == null ) {
     Log.i(TAG, ssh.lastErrorText());
     return;
 }

 //  Display the remote shell's command output:
 Log.i(TAG, cmdOutput);

 //  Disconnect
 ssh.Disconnect();
}

static {
   // Important: Make sure the name passed to loadLibrary matches the shared library
   // found in your project's libs/armeabi directory.
   //  for "libchilkat.so", pass "chilkat" to loadLibrary
   //  for "libchilkatemail.so", pass "chilkatemail" to loadLibrary
   //  etc.
   // 
   System.loadLibrary("chilkat");

   // Note: If the incorrect library name is passed to System.loadLibrary,
   // then you will see the following error message at application startup:
   //"The application <your-application-name> has stopped unexpectedly. Please try again."
}
}